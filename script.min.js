function loadPositionFromFen(e){const a=e.split(" ")[0];let t=0,n=7;for(const e of a)if("/"===e)t=0,n--;else if(isNaN(e)){const a=e===e.toUpperCase()?WHITE:BLACK,s={k:KING,q:QUEEN,r:ROOK,b:BISHOP,n:KNIGHT,p:PAWN}[e.toLowerCase()];chessboard[8*n+t]=s|a,t++}else t+=parseInt(e)}function drawBoard(){for(let e=0;e<8;e++)for(let a=0;a<8;a++){const t=(e+a)%2!=0,n=t?lightCol:darkCol,s=e*squareSize,c=a*squareSize;ctx.fillStyle=n,ctx.fillRect(s,c,squareSize,squareSize);const i=chessboard[e+8*a];if(i!==NONE){const e=preloadedImages[i];e&&ctx.drawImage(e,s-1,c,squareSize,squareSize)}e===selectedFile&&a===selectedRank&&(ctx.fillStyle="red",ctx.globalAlpha=.3,ctx.fillRect(s,c,squareSize,squareSize),ctx.globalAlpha=1)}}function moveData(){for(let e=0;e<8;e++)for(let a=0;a<8;a++){const t=7-a,n=a,s=e,c=7-e,i=8*a+e;squaresToEdge[i]={north:t,south:n,west:s,east:c,minNW:Math.min(t,s),minSE:Math.min(n,c),minNE:Math.min(t,c),minSW:Math.min(n,s)}}}function generateMoves(){moves.length=0;for(let e=0;e<64;e++){const a=Board.Square[e];Piece.isColour(a,Board.ColourToMove)&&Piece.isSlidingPiece(a)&&generateSlidingMoves(e,a)}return moves}function handleCanvasClick(e){const a=canvas.getBoundingClientRect(),t=e.clientX-a.left,n=e.clientY-a.top,s=Math.floor(t/squareSize),c=Math.floor(n/squareSize),i=chessboard[s+8*c];i!==NONE?(i&currentTurn)===currentTurn?(selectedPiece=i,selectedFile=s,selectedRank=c):selectedPiece!==NONE&&(i&currentTurn)!==currentTurn?handlePieceCapture(s,c):console.log("pick yo own damn piece."):selectedPiece!==NONE&&handlePieceMove(s,c)}function handlePieceMove(e,a){chessboard[selectedFile+8*selectedRank]=NONE,chessboard[e+8*a]=selectedPiece,currentTurn=currentTurn===WHITE?BLACK:WHITE,selectedPiece=NONE,selectedFile=-1,selectedRank=-1}function handlePieceCapture(e,a){chessboard[e+8*a];chessboard[selectedFile+8*selectedRank]=NONE,chessboard[e+8*a]=selectedPiece,currentTurn=currentTurn===WHITE?BLACK:WHITE,selectedPiece=NONE,selectedFile=-1,selectedRank=-1}function updateBoard(){drawBoard(),setTimeout(1),requestAnimationFrame(updateBoard)}const NONE=0,KING=1,QUEEN=2,ROOK=3,BISHOP=4,KNIGHT=5,PAWN=6,WHITE=8,BLACK=16,chessboard=Array(64).fill(NONE),startingFen="rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR";loadPositionFromFen(startingFen);const canvasSize=600,squareSize=canvasSize/8,canvas=document.createElement("canvas");canvas.width=canvasSize,canvas.height=canvasSize,document.body.appendChild(canvas);const ctx=canvas.getContext("2d"),lightCol="#f0d9b5",darkCol="#b58863",pieceImages={[BISHOP|WHITE]:"images/bishopwhite.png",[BISHOP|BLACK]:"images/bishopblack.png",[PAWN|WHITE]:"images/pawnwhite.png",[PAWN|BLACK]:"images/pawnblack.png",[KNIGHT|WHITE]:"images/nightwhite.png",[KNIGHT|BLACK]:"images/nightblack.png",[ROOK|WHITE]:"images/rookwhite.png",[ROOK|BLACK]:"images/rookblack.png",[QUEEN|WHITE]:"images/queenwhite.png",[QUEEN|BLACK]:"images/queenblack.png",[KING|WHITE]:"images/kingwhite.png",[KING|BLACK]:"images/kingblack.png"},preloadedImages={};for(const e in pieceImages){const a=new Image;a.src=pieceImages[e],preloadedImages[e]=a}for(let e=0;e<8;e++)console.log(chessboard.slice(8*e,8*(e+1)));const directionOffsets=[8,-8,-1,1,7,-7,9,-9],squaresToEdge={};class Move{constructor(e,a){this.startSquare=e,this.targetSquare=a}}const moves=[];canvas.addEventListener("click",handleCanvasClick);let currentTurn=WHITE,selectedPiece=NONE,selectedFile=-1,selectedRank=-1;updateBoard();