function loadPositionFromFen(e){const s=e.split(" ")[0];let c=0,t=7;for(const e of s)if("/"===e)c=0,t--;else if(isNaN(e)){const s=e===e.toUpperCase()?WHITE:BLACK,n={k:KING,q:QUEEN,r:ROOK,b:BISHOP,n:KNIGHT,p:PAWN}[e.toLowerCase()];chessboard[8*t+c]=n|s,c++}else c+=parseInt(e)}function drawBoard(){for(let e=0;e<8;e++)for(let s=0;s<8;s++){const c=(e+s)%2!=0,t=c?lightCol:darkCol,n=e*squareSize,o=s*squareSize;ctx.fillStyle=t,ctx.fillRect(n,o,squareSize,squareSize);const a=chessboard[e+8*s];if(a!==NONE){const e=preloadedImages[a];e&&ctx.drawImage(e,n-1,o,squareSize,squareSize)}e===selectedFile&&s===selectedRank&&(ctx.fillStyle="red",ctx.globalAlpha=.3,ctx.fillRect(n,o,squareSize,squareSize),ctx.globalAlpha=1),selectedPiece!==NONE&&legalMoves.some(([c,t])=>c===e&&t===s)&&(ctx.fillStyle="green",ctx.globalAlpha=.3,ctx.fillRect(n,o,squareSize,squareSize),ctx.globalAlpha=1)}}function getLegalMovesBishop(e,s){const c=[],t=[[-1,-1],[-1,1],[1,-1],[1,1]];for(const[n,o]of t)for(let t=1;t<8;t++){const a=e+n*t,r=s+o*t;if(a<0||a>=8||r<0||r>=8)break;const l=chessboard[a+8*r];if((l&currentTurn)===currentTurn)break;if(c.push([a,r]),l!==NONE)break}return c}function getLegalMovesRook(e,s){const c=[],t=[[-1,0],[1,0],[0,-1],[0,1]];for(const[n,o]of t)for(let t=1;t<8;t++){const a=e+n*t,r=s+o*t;if(a<0||a>=8||r<0||r>=8)break;const l=chessboard[a+8*r];if((l&currentTurn)===currentTurn)break;if(c.push([a,r]),l!==NONE)break}return c}function getLegalMovesQueen(e,s){return[...getLegalMovesRook(e,s),...getLegalMovesBishop(e,s)]}function getLegalMovesKnight(e,s){const c=[],t=[[-2,-1],[-2,1],[-1,-2],[-1,2],[1,-2],[1,2],[2,-1],[2,1]];for(const[n,o]of t){const t=e+n,a=s+o;if(t<0||t>=8||a<0||a>=8)continue;const r=chessboard[t+8*a];(r&currentTurn)!==currentTurn&&c.push([t,a])}return c}function getLegalMovesPawn(e,s){const c=[],t=currentTurn===WHITE?1:-1;if(3===s&&currentTurn===WHITE){const t=[e-1,e+1];for(const e of t)e>=0&&e<8&&e+8*s===enPassantTarget&&c.push([e,s-1])}else if(4===s&&currentTurn===BLACK){const t=[e-1,e+1];for(const e of t)e>=0&&e<8&&e+8*s===enPassantTarget&&c.push([e,s+1])}const n=e,o=s+t;if(o>=0&&o<8&&chessboard[n+8*o]===NONE){c.push([n,o]);const e=currentTurn===WHITE?1:6,a=s+2*t;s===e&&chessboard[n+8*a]===NONE&&c.push([n,a])}const a=[e-1,e+1];for(const e of a)if(e>=0&&e<8){const n=s+t,o=chessboard[e+8*n];o!==NONE&&(o&currentTurn)!==currentTurn&&c.push([e,n])}return c}function getRawLegalMoves(e,s,c){let t=[];switch(e&~currentTurn){case KING:t=getLegalMovesKing(s,c,e);break;case QUEEN:t=getLegalMovesQueen(s,c);break;case ROOK:t=getLegalMovesRook(s,c);break;case BISHOP:t=getLegalMovesBishop(s,c);break;case KNIGHT:t=getLegalMovesKnight(s,c);break;case PAWN:t=getLegalMovesPawn(s,c)}return t}function isInCheck(e){let s=-1,c=-1;for(let t=0;t<8;t++)for(let n=0;n<8;n++){const o=chessboard[t+8*n];if((o&~e)===KING&&(o&e)===e){s=t,c=n;break}}const t=e===WHITE?BLACK:WHITE;for(let e=0;e<8;e++)for(let n=0;n<8;n++){const o=chessboard[e+8*n];if((o&t)===t){const t=getRawLegalMoves(o,e,n);if(t.some(([e,t])=>e===s&&t===c))return!0}}return!1}function isSquareAttacked(e,s,c){const t=c===WHITE?BLACK:WHITE;for(let c=0;c<8;c++)for(let n=0;n<8;n++){const o=chessboard[c+8*n];if((o&t)===t){const t=getRawLegalMoves(o,c,n);if(t.some(([c,t])=>c===e&&t===s))return!0}}return!1}function getLegalMoves(e,s,c){let t=getRawLegalMoves(e,s,c);return t=t.filter(([t,n])=>{const o=chessboard[t+8*n];chessboard[s+8*c]=NONE,chessboard[t+8*n]=e;const a=isInCheck(currentTurn);return chessboard[s+8*c]=e,chessboard[t+8*n]=o,!a}),t}function handleCanvasClick(e){const s=canvas.getBoundingClientRect(),c=e.clientX-s.left,t=e.clientY-s.top,n=Math.floor(c/squareSize),o=Math.floor(t/squareSize),a=chessboard[n+8*o];a!==NONE?(a&currentTurn)===currentTurn?(selectedPiece=a,selectedFile=n,selectedRank=o,legalMoves=getLegalMoves(selectedPiece,n,o)):selectedPiece!==NONE&&(a&currentTurn)!==currentTurn?handlePieceCapture(n,o):console.log("pick yo own damn piece."):selectedPiece!==NONE&&handlePieceMove(n,o)}function handlePieceMove(e,s){if(!legalMoves.some(([c,t])=>c===e&&t===s))return void console.log("Illegal move.");selectedPiece!==(KING|WHITE)||4!==selectedFile||2!==e&&6!==e?selectedPiece!==(KING|BLACK)||4!==selectedFile||2!==e&&6!==e?selectedPiece!==(KING|WHITE)&&selectedPiece!==(KING|BLACK)||(whiteKingMoved=!0,blackKingMoved=!0):(blackKingMoved=!0,2===e?(chessboard[56+8*selectedRank]=NONE,chessboard[59+8*selectedRank]=ROOK|BLACK):(chessboard[63+8*selectedRank]=NONE,chessboard[61+8*selectedRank]=ROOK|BLACK)):(whiteKingMoved=!0,2===e?(chessboard[0+8*selectedRank]=NONE,chessboard[3+8*selectedRank]=ROOK|WHITE):(chessboard[7+8*selectedRank]=NONE,chessboard[5+8*selectedRank]=ROOK|WHITE)),chessboard[selectedFile+8*selectedRank]=NONE,chessboard[e+8*s]=selectedPiece;const c=currentTurn;if(currentTurn=currentTurn===WHITE?BLACK:WHITE,isInCheck(c))return console.log("Cannot move into check."),chessboard[selectedFile+8*selectedRank]=selectedPiece,chessboard[e+8*s]=NONE,void(currentTurn=c);selectedPiece=NONE,selectedFile=-1,selectedRank=-1,legalMoves=[]}function handlePieceCapture(e,s){if(!legalMoves.some(([c,t])=>c===e&&t===s))return void console.log("Illegal move.");selectedPiece===KING|WHITE?whiteKingMoved=!0:selectedPiece===KING|BLACK?blackKingMoved=!0:selectedPiece===ROOK|WHITE?0===selectedFile?whiteRookQueenSideMoved=!0:7===selectedFile&&(whiteRookKingSideMoved=!0):selectedPiece===ROOK|BLACK&&(0===selectedFile?blackRookQueenSideMoved=!0:7===selectedFile&&(blackRookKingSideMoved=!0)),selectedPiece===PAWN|WHITE&&selectedFile!==e&&chessboard[e+8*s]===NONE?chessboard[e+8*(s+1)]=NONE:selectedPiece===PAWN|BLACK&&selectedFile!==e&&chessboard[e+8*s]===NONE&&(chessboard[e+8*(s-1)]=NONE);const c=chessboard[e+8*s];chessboard[selectedFile+8*selectedRank]=NONE,chessboard[e+8*s]=selectedPiece;const t=currentTurn;if(currentTurn=currentTurn===WHITE?BLACK:WHITE,isInCheck(t))return console.log("Cannot move into check."),chessboard[selectedFile+8*selectedRank]=selectedPiece,chessboard[e+8*s]=c,void(currentTurn=t);selectedPiece=NONE,selectedFile=-1,selectedRank=-1,legalMoves=[]}function updateBoard(){drawBoard(),setTimeout(1),requestAnimationFrame(updateBoard)}const NONE=0,KING=1,QUEEN=2,ROOK=3,BISHOP=4,KNIGHT=5,PAWN=6,WHITE=8,BLACK=16,chessboard=Array(64).fill(NONE),startingFen="rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR";loadPositionFromFen(startingFen);const canvasSize=600,squareSize=canvasSize/8,canvas=document.createElement("canvas");canvas.width=canvasSize,canvas.height=canvasSize,document.body.appendChild(canvas);const ctx=canvas.getContext("2d"),lightCol="#f0d9b5",darkCol="#b58863",pieceImages={[BISHOP|WHITE]:"images/bishopwhite.png",[BISHOP|BLACK]:"images/bishopblack.png",[PAWN|WHITE]:"images/pawnwhite.png",[PAWN|BLACK]:"images/pawnblack.png",[KNIGHT|WHITE]:"images/nightwhite.png",[KNIGHT|BLACK]:"images/nightblack.png",[ROOK|WHITE]:"images/rookwhite.png",[ROOK|BLACK]:"images/rookblack.png",[QUEEN|WHITE]:"images/queenwhite.png",[QUEEN|BLACK]:"images/queenblack.png",[KING|WHITE]:"images/kingwhite.png",[KING|BLACK]:"images/kingblack.png"},preloadedImages={};for(const e in pieceImages){const s=new Image;s.src=pieceImages[e],preloadedImages[e]=s}for(let e=0;e<8;e++)console.log(chessboard.slice(8*e,8*(e+1)));let whiteKingMoved=!1,blackKingMoved=!1,whiteRookKingSideMoved=!1,whiteRookQueenSideMoved=!1,blackRookKingSideMoved=!1,blackRookQueenSideMoved=!1,enPassantTarget=-1;canvas.addEventListener("click",handleCanvasClick);let currentTurn=WHITE,selectedPiece=NONE,selectedFile=-1,selectedRank=-1,legalMoves=[];updateBoard();